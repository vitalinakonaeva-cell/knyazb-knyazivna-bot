import os
import logging
from datetime import datetime, timedelta, timezone
from telegram import Update, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

# =============== –ù–ê–°–¢–†–û–ô–ö–ò ===============
BOT_TOKEN = os.getenv("8228312942:AAH9W6pWWwC7IVAB_31BAdns3Cnc9k5potU")  # –¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
ADMIN_ID = 1491698235               # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID
DEADLINE_MINUTES = 6                # –í—Ä–µ–º—è –Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
# ========================================

logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger("kniaz_bot")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
PHOTO, PSEUDONYM, CREDO_LAW, FULLNAME = range(4)

# –¢–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
WELCOME = (
    "–í—ñ—Ç–∞—é! –í–∏ —Ö–æ—á–µ—Ç–µ –ø–æ–¥–∞—Ç–∏ —Å–≤–æ—é –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä—É –Ω–∞ —Ñ–æ—Ç–æ-–∫–æ–Ω–∫—É—Ä—Å "
    "¬´–ö–Ω—è–∑—å —ñ –ö–Ω—è–∑—ñ–≤–Ω–∞ –∫–æ–ª–µ–¥–∂—É¬ª. –î–ª—è —É—á–∞—Å—Ç—ñ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤–æ—é —Ä–æ–±–æ—Ç—É (—Ñ–æ—Ç–æ-–∫–æ—Å–ø–ª–µ–π)."
)
ASK_PSEUDONYM = (
    "–ù–∞–ø–∏—à—ñ—Ç—å —Å–≤—ñ–π –ø—Å–µ–≤–¥–æ–Ω—ñ–º –∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–æ—é, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: "
    "–ö–Ω—è–∑—å-–≤—ñ–¥–≤–∞–∂–Ω–∏–π –∞–±–æ –ö–Ω—è–≥–∏–Ω—è-–ø—Ä–µ–≥–∞—Ä–Ω–∞."
)
ASK_CREDO_LAW = "–¢–µ–ø–µ—Ä –ø—Ä–æ–≥–æ–ª–æ—Å—ñ—Ç—å —Å–≤—ñ–π –ø–æ—Å—Ç—É–ª–∞—Ç (–∫—Ä–µ–¥–æ) —ñ –ø–µ—Ä—à–∏–π –ø—Ä–∏–π–Ω—è—Ç–∏–π –∑–∞–∫–æ–Ω."
ASK_FULLNAME = "–í–∫–∞–∂—ñ—Ç—å —Å–≤–æ—ó –ü–Ü–ë —ñ –≥—Ä—É–ø—É."
THANKS = "–î—è–∫—É—é! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–π–Ω—è—Ç–∞. –û—á—ñ–∫—É–π—Ç–µ –Ω–æ–≤–∏–Ω üôÇ"
TIMEOUT_MSG = (
    "–ú–∏–Ω—É–ª–æ –±—ñ–ª—å—à–µ –Ω—ñ–∂ 6 —Ö–≤ –≤—ñ–¥ –ø–æ—á–∞—Ç–∫—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏, –¥—ñ–∞–ª–æ–≥ —Å–∫–∏–Ω—É—Ç–æ. "
    "–©–æ–± –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É ‚Äî –≤–≤–µ–¥—ñ—Ç—å /start."
)
CANCEL_MSG = "–ó–∞—è–≤–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É –∫–æ–º–∞–Ω–¥–æ—é /start."


# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====
def _now_utc():
    return datetime.now(timezone.utc)


def _deadline_exceeded(context: ContextTypes.DEFAULT_TYPE) -> bool:
    dl = context.user_data.get("deadline")
    return bool(dl and _now_utc() > dl)


async def _ensure_deadline_or_abort(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º-–∞—É—Ç–∞. –ï—Å–ª–∏ –∏—Å—Ç—ë–∫ ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥."""
    if _deadline_exceeded(context):
        await update.effective_chat.send_message(TIMEOUT_MSG, reply_markup=ReplyKeyboardRemove())
        return False
    return True


async def _send_submission_to_admin(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω—É"""
    data = context.user_data
    photo_id = data.get("photo_file_id")
    pseudo = data.get("pseudonym")
    credo = data.get("credo")
    fullname = data.get("fullname")
    user = data.get("user_mention", "‚Äî")

    text = (
        "üì® –ù–û–í–ê –ó–ê–Ø–í–ö–ê –ù–ê –ö–û–ù–ö–£–†–° ¬´–ö–Ω—è–∑—å —ñ –ö–Ω—è–∑—ñ–≤–Ω–∞ –∫–æ–ª–µ–¥–∂—É¬ª\n\n"
        f"–í—ñ–¥: {user}\n"
        f"–ü—Å–µ–≤–¥–æ–Ω—ñ–º: {pseudo}\n"
        f"–ö—Ä–µ–¥–æ —ñ –∑–∞–∫–æ–Ω: {credo}\n"
        f"–ü–Ü–ë —ñ –≥—Ä—É–ø–∞: {fullname}\n"
        f"–ß–∞—Å (UTC): {_now_utc().strftime('%Y-%m-%d %H:%M:%S')}"
    )

    try:
        if photo_id:
            await context.bot.send_photo(chat_id=ADMIN_ID, photo=photo_id, caption=text)
        else:
            await context.bot.send_message(chat_id=ADMIN_ID, text=text)
    except Exception as e:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞—è–≤–∫—É –∞–¥–º—ñ–Ω—É: {e}")


# ====== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–ò–ê–õ–û–ì–ê ======
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°—Ç–∞—Ä—Ç –¥–∏–∞–ª–æ–≥–∞"""
    context.user_data["deadline"] = _now_utc() + timedelta(minutes=DEADLINE_MINUTES)
    user = update.effective_user
    mention = f"{user.full_name} (@{user.username})" if user.username else user.full_name
    context.user_data["user_mention"] = mention

    await update.message.reply_text(WELCOME)
    return PHOTO


async def photo_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not await _ensure_deadline_or_abort(update, context):
        return ConversationHandler.END
    if update.message and update.message.photo:
        context.user_data["photo_file_id"] = update.message.photo[-1].file_id
        await update.message.reply_text(ASK_PSEUDONYM)
        return PSEUDONYM
    await update.message.reply_text("–ù–∞–¥—ñ—à–ª—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–∞–º–µ —Ñ–æ—Ç–æ-–∫–æ—Å–ø–ª–µ–π.")
    return PHOTOasync def pseudonym_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not await _ensure_deadline_or_abort(update, context):
        return ConversationHandler.END
    context.user_data["pseudonym"] = update.message.text.strip()
    await update.message.reply_text(ASK_CREDO_LAW)
    return CREDO_LAW


async def credo_law_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not await _ensure_deadline_or_abort(update, context):
        return ConversationHandler.END
    context.user_data["credo"] = update.message.text.strip()
    await update.message.reply_text(ASK_FULLNAME)
    return FULLNAME


async def fullname_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not await _ensure_deadline_or_abort(update, context):
        return ConversationHandler.END
    context.user_data["fullname"] = update.message.text.strip()
    await update.message.reply_text(THANKS, reply_markup=ReplyKeyboardRemove())
    await _send_submission_to_admin(context)
    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(CANCEL_MSG, reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END


# ====== –ó–ê–ü–£–°–ö –ë–û–¢–ê ======
def main():
    if not BOT_TOKEN:
        raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –î–æ–±–∞–≤—å –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            PHOTO: [MessageHandler(filters.PHOTO, photo_received)],
            PSEUDONYM: [MessageHandler(filters.TEXT & ~filters.COMMAND, pseudonym_received)],
            CREDO_LAW: [MessageHandler(filters.TEXT & ~filters.COMMAND, credo_law_received)],
            FULLNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, fullname_received)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True,
    )

    app.add_handler(conv_handler)

    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —ñ –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏.")
    app.run_polling()


if __name__ == "main":
    main()
