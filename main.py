# ---- –ë–û–¢ "–ö–Ω—è–∑—å —ñ –ö–Ω—è–∑—ñ–≤–Ω–∞ –∫–æ–ª–µ–¥–∂—É" ----
# –ü—Ä–∞—Ü—é—î –Ω–∞ python-telegram-bot v20.8
# –ê–≤—Ç–æ—Ä: —Ç–≤—ñ–π –ø–æ–º—ñ—á–Ω–∏–∫ ‚ù§Ô∏è

import logging
from datetime import datetime, timedelta, timezone
from telegram import Update, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters
)

# === üîπ –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ===
BOT_TOKEN = "8228312942:AAH9W6pWWwC7IVAB_31BAdns3Cnc9k5potU"     # –≤—Å—Ç–∞–≤ —Ç–æ–∫–µ–Ω —ñ–∑ BotFather
ADMIN_ID = 1491698235                   # —Å–≤—ñ–π Telegram ID
DEADLINE_MINUTES = 6                    # —á–∞—Å –ø–æ–¥–∞–Ω–Ω—è –∑–∞—è–≤–∫–∏
# =========================

logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger("kniaz_knyazivna")

# –°–¢–ê–ù–ò –¥—ñ–∞–ª–æ–≥—É
PHOTO, PSEUDONYM, CREDO_LAW, FULLNAME = range(4)

# –¢–µ–∫—Å—Ç–∏
WELCOME = (
    "üëë –í—ñ—Ç–∞—é! –í–∏ —Ö–æ—á–µ—Ç–µ –ø–æ–¥–∞—Ç–∏ —Å–≤–æ—é –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä—É –Ω–∞ —Ñ–æ—Ç–æ-–∫–æ–Ω–∫—É—Ä—Å "
    "¬´–ö–Ω—è–∑—å —ñ –ö–Ω—è–∑—ñ–≤–Ω–∞ –∫–æ–ª–µ–¥–∂—É¬ª.\n\nüì∏ –î–ª—è —É—á–∞—Å—Ç—ñ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤–æ—î —Ñ–æ—Ç–æ-–∫–æ—Å–ø–ª–µ–π "
    "–Ω–∞ —ñ—Å—Ç–æ—Ä–∏—á–Ω—É —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –ø–æ—Å—Ç–∞—Ç—å."
)
ASK_PSEUDONYM = (
    "‚ú® –ù–∞–ø–∏—à—ñ—Ç—å —Å–≤—ñ–π –ø—Å–µ–≤–¥–æ–Ω—ñ–º –∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–æ—é. –ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n"
    "–ö–Ω—è–∑—å-–≤—ñ–¥–≤–∞–∂–Ω–∏–π, –ö–Ω—è–≥–∏–Ω—è-–ø—Ä–µ–≥–∞—Ä–Ω–∞ –∞–±–æ –ö–Ω—è–∑—å-–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–∏–π –§—Ä–∞–Ω–∫–æ."
)
ASK_CREDO_LAW = (
    "üìú –¢–µ–ø–µ—Ä –ø—Ä–æ–≥–æ–ª–æ—Å—ñ—Ç—å —Å–≤—ñ–π –ø–æ—Å—Ç—É–ª–∞—Ç (–∫—Ä–µ–¥–æ) —ñ –ø–µ—Ä—à–∏–π –ø—Ä–∏–π–Ω—è—Ç–∏–π –∑–∞–∫–æ–Ω —É –≤–∞—à—ñ–π –¥–µ—Ä–∂–∞–≤—ñ."
)
ASK_FULLNAME = "ü™™ –í–∫–∞–∂—ñ—Ç—å —Å–≤–æ—ó –ü–Ü–ë —ñ –≥—Ä—É–ø—É."
THANKS = "‚úÖ –î—è–∫—É—é! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–π–Ω—è—Ç–∞. –û—á—ñ–∫—É–π—Ç–µ –ø–æ–¥–∞–ª—å—à–∏—Ö –Ω–æ–≤–∏–Ω!"
TIMEOUT_MSG = (
    "‚è∞ –ú–∏–Ω—É–ª–æ –ø–æ–Ω–∞–¥ 6 —Ö–≤ –≤—ñ–¥ –ø–æ—á–∞—Ç–∫—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏, –¥—ñ–∞–ª–æ–≥ —Å–∫–∏–Ω—É—Ç–æ.\n"
    "–©–æ–± –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É ‚Äî –≤–≤–µ–¥—ñ—Ç—å /start."
)
CANCEL_MSG = "‚ùå –ó–∞—è–≤–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É –∫–æ–º–∞–Ω–¥–æ—é /start."


def now_utc():
    return datetime.now(timezone.utc)


def deadline_passed(context: ContextTypes.DEFAULT_TYPE) -> bool:
    limit = context.user_data.get("deadline")
    return bool(limit and now_utc() > limit)


async def check_time_or_stop(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    if deadline_passed(context):
        await update.effective_chat.send_message(TIMEOUT_MSG, reply_markup=ReplyKeyboardRemove())
        return False
    return True


async def send_to_admin(context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞–¥—Å–∏–ª–∞—î –∑–∞—è–≤–∫—É –∞–¥–º—ñ–Ω—É"""
    d = context.user_data
    caption = (
        "üì© *–ù–û–í–ê –ó–ê–Ø–í–ö–ê –ù–ê –ö–û–ù–ö–£–†–°*\n"
        "¬´–ö–Ω—è–∑—å —ñ –ö–Ω—è–∑—ñ–≤–Ω–∞ –∫–æ–ª–µ–¥–∂—É¬ª üëë\n\n"
        f"üë§ –í—ñ–¥: {d.get('user_name', '-')}\n"
        f"üè∞ –ü—Å–µ–≤–¥–æ–Ω—ñ–º: {d.get('pseudonym', '-')}\n"
        f"üìú –ö—Ä–µ–¥–æ: {d.get('credo', '-')}\n"
        f"‚öñÔ∏è –ó–∞–∫–æ–Ω: {d.get('law', '-')}\n"
        f"ü™™ –ü–Ü–ë —ñ –≥—Ä—É–ø–∞: {d.get('fullname', '-')}\n"
        f"üïì –ß–∞—Å (UTC): {now_utc().strftime('%Y-%m-%d %H:%M:%S')}"
    )
    try:
        if d.get("photo_id"):
            await context.bot.send_photo(ADMIN_ID, d["photo_id"], caption=caption, parse_mode="Markdown")
        else:
            await context.bot.send_message(ADMIN_ID, caption, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∞–¥–º—ñ–Ω—É: {e}")


# ======== –ï–¢–ê–ü–ò –î–Ü–ê–õ–û–ì–£ ========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["deadline"] = now_utc() + timedelta(minutes=DEADLINE_MINUTES)
    user = update.effective_user
    context.user_data["user_name"] = f"{user.full_name} (@{user.username})" if user.username else user.full_name
    await update.message.reply_text(WELCOME)
    return PHOTO


async def get_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not await check_time_or_stop(update, context):
        return ConversationHandler.END
    if update.message.photo:
        context.user_data["photo_id"] = update.message.photo[-1].file_id
        await update.message.reply_text(ASK_PSEUDONYM)
        return PSEUDONYM
    else:
        await update.message.reply_text("–ù–∞–¥—ñ—à–ª—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Ñ–æ—Ç–æ-–∫–æ—Å–ø–ª–µ–π üì∏.")
        return PHOTO


async def get_pseudonym(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not await check_time_or_stop(update, context):
        return ConversationHandler.END
    context.user_data["pseudonym"] = update.message.text.strip()
    await update.message.reply_text(ASK_CREDO_LAW)
    return CREDO_LAW


async def get_credo_law(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not await check_time_or_stop(update, context):
        return ConversationHandler.END
    context.user_data["credo"] = update.message.text.strip()
    context.user_data["law"] = "‚Äî"
    await update.message.reply_text(ASK_FULLNAME)
    return FULLNAME


async def get_fullname(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not await check_time_or_stop(update, context):
        return ConversationHandler.END
    context.user_data["fullname"] = update.message.text.strip()
    await update.message.reply_text(THANKS)
    await send_to_admin(context)
    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(CANCEL_MSG, reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END


# ======== –ì–û–õ–û–í–ù–ê –§–£–ù–ö–¶–Ü–Ø ========
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            PHOTO: [MessageHandler(filters.PHOTO, get_photo)],
            PSEUDONYM: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_pseudonym)],
            CREDO_LAW: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_credo_law)],
            FULLNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_fullname)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        conversation_timeout=DEADLINE_MINUTES * 60,
    )

    app.add_handler(conv)
    app.add_handler(CommandHandler("cancel", cancel))

    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —ñ –≥–æ—Ç–æ–≤–∏–π –ø—Ä–∏–π–º–∞—Ç–∏ –∑–∞—è–≤–∫–∏!")
    app.run_polling(drop_pending_updates=True)


if __name__ == "__main__":
    main()
