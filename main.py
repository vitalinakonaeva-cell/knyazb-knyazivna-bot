# ---- –ë–û–¢ "–ö–Ω—è–∑—å —ñ –ö–Ω—è–∑—ñ–≤–Ω–∞ –∫–æ–ª–µ–¥–∂—É" (PTB 21.x) ----
import logging
from datetime import datetime, timedelta, timezone
from telegram import Update, ReplyKeyboardRemove
from telegram.ext import (
    Application, ApplicationBuilder,
    CommandHandler, MessageHandler, ConversationHandler,
    ContextTypes, filters
)

# === –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ===
BOT_TOKEN = "8228312942:AAH9W6pWWwC7IVAB_31BAdns3Cnc9k5potU"
ADMIN_ID = 1491698235         # —Ç–≤—ñ–π Telegram ID (@userinfobot)
DEADLINE_MINUTES = 6
# =====================

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s"
)
log = logging.getLogger("knyaz-knyazivna")

PHOTO, PSEUDONYM, CREDO_LAW, FULLNAME = range(4)

WELCOME = (
    "üëë –í—ñ—Ç–∞—é! –í–∏ —Ö–æ—á–µ—Ç–µ –ø–æ–¥–∞—Ç–∏ —Å–≤–æ—é –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä—É –Ω–∞ —Ñ–æ—Ç–æ-–∫–æ–Ω–∫—É—Ä—Å "
    "¬´–ö–Ω—è–∑—å —ñ –ö–Ω—è–∑—ñ–≤–Ω–∞ –∫–æ–ª–µ–¥–∂—É¬ª.\n\nüì∏ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ-–∫–æ—Å–ø–ª–µ–π –Ω–∞ —ñ—Å—Ç–æ—Ä–∏—á–Ω—É —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –ø–æ—Å—Ç–∞—Ç—å."
)
ASK_PSEUDONYM = (
    "‚ú® –ù–∞–ø–∏—à—ñ—Ç—å —Å–≤—ñ–π –ø—Å–µ–≤–¥–æ–Ω—ñ–º –∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–æ—é. –ù–∞–ø—Ä.: "
    "–ö–Ω—è–∑—å-–≤—ñ–¥–≤–∞–∂–Ω–∏–π, –ö–Ω—è–≥–∏–Ω—è-–ø—Ä–µ–≥–∞—Ä–Ω–∞ –∞–±–æ –ö–Ω—è–∑—å-–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–∏–π –§—Ä–∞–Ω–∫–æ."
)
ASK_CREDO_LAW = "üìú –ü—Ä–æ–≥–æ–ª–æ—Å—ñ—Ç—å —Å–≤—ñ–π –ø–æ—Å—Ç—É–ª–∞—Ç (–∫—Ä–µ–¥–æ) —ñ –ø–µ—Ä—à–∏–π –ø—Ä–∏–π–Ω—è—Ç–∏–π –∑–∞–∫–æ–Ω —É –≤–∞—à—ñ–π –¥–µ—Ä–∂–∞–≤—ñ."
ASK_FULLNAME = "ü™™ –í–∫–∞–∂—ñ—Ç—å —Å–≤–æ—ó –ü–Ü–ë —ñ –≥—Ä—É–ø—É."
THANKS = "‚úÖ –î—è–∫—É—é! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–π–Ω—è—Ç–∞. –û—á—ñ–∫—É–π—Ç–µ –ø–æ–¥–∞–ª—å—à–∏—Ö –Ω–æ–≤–∏–Ω!"
TIMEOUT_MSG = (
    "‚è∞ –ú–∏–Ω—É–ª–æ –ø–æ–Ω–∞–¥ 6 —Ö–≤ –≤—ñ–¥ –ø–æ—á–∞—Ç–∫—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏, –¥—ñ–∞–ª–æ–≥ —Å–∫–∏–Ω—É—Ç–æ. "
    "–©–æ–± –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É ‚Äî –≤–≤–µ–¥—ñ—Ç—å /start."
)
CANCEL_MSG = "‚ùå –ó–∞—è–≤–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É –∫–æ–º–∞–Ω–¥–æ—é /start."

def now_utc() -> datetime:
    return datetime.now(timezone.utc)

def deadline_passed(context: ContextTypes.DEFAULT_TYPE) -> bool:
    limit = context.user_data.get("deadline")
    return bool(limit and now_utc() > limit)

async def ensure_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    if deadline_passed(context):
        await update.effective_chat.send_message(TIMEOUT_MSG, reply_markup=ReplyKeyboardRemove())
        return False
    return True

async def send_to_admin(context: ContextTypes.DEFAULT_TYPE):
    d = context.user_data
    caption = (
        "üì© *–ù–û–í–ê –ó–ê–Ø–í–ö–ê –ù–ê –ö–û–ù–ö–£–†–°* ¬´–ö–Ω—è–∑—å —ñ –ö–Ω—è–∑—ñ–≤–Ω–∞ –∫–æ–ª–µ–¥–∂—É¬ª\n\n"
        f"üë§ –í—ñ–¥: {d.get('user_name','-')}\n"
        f"üè∞ –ü—Å–µ–≤–¥–æ–Ω—ñ–º: {d.get('pseudonym','-')}\n"
        f"üìú –ö—Ä–µ–¥–æ: {d.get('credo','-')}\n"
        f"‚öñÔ∏è –ó–∞–∫–æ–Ω: {d.get('law','-')}\n"
        f"ü™™ –ü–Ü–ë —ñ –≥—Ä—É–ø–∞: {d.get('fullname','-')}\n"
        f"üïì –ß–∞—Å (UTC): {now_utc().strftime('%Y-%m-%d %H:%M:%S')}"
    )
    try:
        if d.get("photo_id"):
            await context.bot.send_photo(ADMIN_ID, d["photo_id"], caption=caption, parse_mode="Markdown")
        else:
            await context.bot.send_message(ADMIN_ID, caption, parse_mode="Markdown")
    except Exception as e:
        log.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∞–¥–º—ñ–Ω—É: %s", e)

# ==== –•–ï–ù–î–õ–ï–†–ò –î–Ü–ê–õ–û–ì–£ ====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["deadline"] = now_utc() + timedelta(minutes=DEADLINE_MINUTES)
    u = update.effective_user
    context.user_data["user_name"] = f"{u.full_name} (@{u.username})" if u.username else u.full_name
    await update.message.reply_text(WELCOME)
    return PHOTO

async def photo_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not await ensure_time(update, context):
        return ConversationHandler.END
    if update.message.photo:
        context.user_data["photo_id"] = update.message.photo[-1].file_id
        await update.message.reply_text(ASK_PSEUDONYM)
        return PSEUDONYM
    await update.message.reply_text("–ù–∞–¥—ñ—à–ª—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–∞–º–µ —Ñ–æ—Ç–æ üì∏.")
    return PHOTO

async def pseudonym_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not await ensure_time(update, context):
        return ConversationHandler.END
    context.user_data["pseudonym"] = (update.message.text or "").strip()
    await update.message.reply_text(ASK_CREDO_LAW)
    return CREDO_LAW

async def credo_law_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not await ensure_time(update, context):
        return ConversationHandler.END
    # –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º—ñ–≥ –Ω–∞–ø–∏—Å–∞—Ç–∏ —ñ –∫—Ä–µ–¥–æ, —ñ –∑–∞–∫–æ–Ω –≤ –æ–¥–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ ‚Äî –∑–±–µ—Ä–µ–∂–µ–º–æ –≤—Å–µ —É "credo"
    context.user_data["credo"] = (update.message.text or "").strip()
    context.user_data["law"] = "‚Äî"
    await update.message.reply_text(ASK_FULLNAME)
    return FULLNAME

async def fullname_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not await ensure_time(update, context):
        return ConversationHandler.END
    context.user_data["fullname"] = (update.message.text or "").strip()
    await update.message.reply_text(THANKS)
    await send_to_admin(context)
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(CANCEL_MSG, reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# ==== –ó–ê–ü–£–°–ö ====
def main():
    app: Application = ApplicationBuilder().token(BOT_TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            PHOTO: [MessageHandler(filters.PHOTO, photo_received)],
            PSEUDONYM: [MessageHandler(filters.TEXT & ~filters.COMMAND, pseudonym_received)],
            CREDO_LAW: [MessageHandler(filters.TEXT & ~filters.COMMAND, credo_law_received)],
            FULLNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, fullname_received)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        conversation_timeout=DEADLINE_MINUTES * 60,
    )

    app.add_handler(conv)
    app.add_handler(CommandHandler("cancel", cancel))

    log.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ (PTB 21.x).")
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
